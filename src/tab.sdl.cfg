// ---------------- DEFINITIONS ----------------

//method selection (uncomment to include)
//#define TAB__UNSAFE_ACCESS_ALLOWED

//data structure
typedef struct {
	GUulng len;
	GUulng itmSz;
	GUulng lenMax;
	ref    dat;
} tab;






// ---------------- BASICS ----------------

//existence
tab* tab__new(GUulng itmSz, GUulng lenMax);
void tab__free(tab* sbj);

//unsafe indexing
#ifdef TAB__UNSAFE_ACCESS_ALLOWED //otherwise, internal use only
void tab__unsafe_get(tab* sbj, GUulng idx, iref dst);
void tab__unsafe_set(tab* sbj, GUulng idx, iref src);
#endif

//safe indexing
void tab__safe_get(tab* sbj, GUulng idx, iref dst);
void tab__safe_set(tab* sbj, GUulng idx, iref src);

//last
boo  tab__isEmpty(tab* sbj);
void tab__last(   tab* sbj, iref dst);
void tab__rmLast( tab* sbj);
void tab__popLast(tab* sbj, iref dst);

//push
#ifdef TAB__UNSAFE_ACCESS_ALLOWED //otherwise, internal use only
void tab__unsafe_push(tab* sbj, iref src);
#endif
void tab__safe_push(tab* sbj, iref src);

//actions as a whole
void tab__empty(    tab* sbj          );
void tab__overwrite(tab* sbj, iref src);
void tab__fullfill( tab* sbj, iref src);

//actions between tabs
tab* tab__copy(tab* src);
